npm install -g webpack
npm init 创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等
npm install --save-dev webpack  本项目中安装Webpack作为依赖包
node_modules/.bin/webpack app/main.js public/bundle.js  将main.js编译到 bundle.js中
也可以通过配置文件来使用：新建webpack.config.js
        module.exports = {
		  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件
		  output: {
		    path: __dirname + "/public",//打包后的文件存放的地方
		    filename: "bundle.js"//打包后输出文件的文件名
		  }
		}
// “__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。
// 有了这个配置之后，再打包文件，只需在终端里运行webpack,这条命令会自动引用webpack.config.js文件


更快捷的执行打包任务:
        对npm进行配置后可以在命令行中使用简单的npm start命令来替代上面略微繁琐的命令。
        在package.json中对scripts对象进行相关设置即可\
        {
		  "name": "webpack-sample-project",
		  "version": "1.0.0",
		  "description": "Sample webpack project",
		  "scripts": {// script会安装一定顺序寻找命令对应位置，不需要node_modules/.bin/webpack app/main.js public/bundle.js或者只需在终端里运行webpack
		    "start": "webpack" // 无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了
		  },
		  "author": "zhang",
		  "license": "ISC",
		  "devDependencies": {
		    "webpack": "^1.12.9"
		  }
		}
Webpack的强大功能：

    生成Source Maps（使调试更容易）:
    	    调试能极大的提高开发效率，打包后的文件，不容易找到错的地方，对应的你写的代码的位置的，Source Maps就是来帮我们解决这个问题的。
    	    webpack就可以在打包时为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试
    	    在webpack的配置文件中配置source maps，需要配置devtool（devtool有4种选项，但是开发阶段的化我们使用eval-source-map）
    	    cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。
    	    配置webpack.config.js
    	    module.exports = {
		  devtool: 'eval-source-map',
		  entry:  __dirname + "/app/main.js",
		  output: {
		    path: __dirname + "/public",
		    filename: "bundle.js"
		  }
		}
	使用webpack构建本地服务器:
		浏览器监听你的代码的修改，并自动刷新显示修改后的结果，这个本地服务器基于node.js构建
		不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖
		npm install --save-dev webpack-dev-server
		contentBase:默认为根目录提供本地为目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public"目录）
		port：设置默认监听端口，如果省略，默认为”8080“
		inline：设置为true，当源文件改变时会自动刷新页面
		historyApiFallback：在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html
		module.exports = {
		  devtool: 'eval-source-map',
		
		  entry:  __dirname + "/app/main.js",
		  output: {
		    path: __dirname + "/public",
		    filename: "bundle.js"
		  },
		
		  devServer: {
		    contentBase: "./public",//本地服务器所加载的页面所在的目录
		    historyApiFallback: true,//不跳转
		    inline: true，//实时刷新
		  } 
		}
		在package.json中的scripts对象中添加如下命令，用以开启本地服务器
		npm run server即可在本地的8080端口查看结果

	Loaders:
		实现对不同格式的文件的处理，转换scss为css，es6=>es5，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。
		webpack3.*/webpack2.*已经内置可处理JSON文件，这里我们无需再添加webpack1.*需要的json-loader。
		需要单独安装并且需要在webpack.config.js中的modules关键字下进行配置:
			test：匹配loaders处理文件的拓展名的正则表达式（必须）
			loader：loader的名称（必须）
			include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；
			query：为loaders提供额外的设置选项（可选）
	Babel:
		编译JavaScript的平台:es6,es7=>es5,基于JavaScript进行了拓展的语言，比如React的JSX；
		babel=几个模块包的和，其核心功能位于babel-core的npm包中，webpack可以把其不同的包整合在一起使用。
		对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。
		Babel的安装与配置:
			一次性安装完成：npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react
			module.exports = {
			    entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件
			    output: {
			        path: __dirname + "/public",//打包后的文件存放的地方
			        filename: "bundle.js"//打包后输出文件的文件名
			    },
			    devtool: 'eval-source-map',
			    devServer: {
			        contentBase: "./public",//本地服务器所加载的页面所在的目录
			        historyApiFallback: true,//不跳转
			        inline: true//实时刷新
			    },
			    module: {
			        rules: [
			            {
			                test: /(\.jsx|\.js)$/,
			                use: {
			                    loader: "babel-loader",
			                    options: {
			                        presets: [
			                            "es2015", "react"
			                        ]
			                    }
			                },
			                exclude: /node_modules/
			            }
			        ]
			    }
			};
			webpack的配置已经允许你使用ES6以及JSX的语法了
			npm install --save react react-dom
	一切皆模块
		CSS:css-loader 和 style-loade
			css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能.
			style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。
			npm install --save-dev style-loader css-loader
			module: {
		        rules: [
		            {
		                test: /(\.jsx|\.js)$/,
		                use: {
		                    loader: "babel-loader"
		                },
		                exclude: /node_modules/
		            },
		            {
		                test: /\.css$/,
		                use: [
		                    {
		                        loader: "style-loader"
		                    }, {
		                        loader: "css-loader"，
		                        options: {modules: true}
		                    }
		                ]
		            }
		        ]
		    }
		    // 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。
		CSS module：// 允许将css以模块的方式引入，并且styles.root
		CSS预处理器：
			Sass 和 Less 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS
			npm install --save-dev postcss-loader autoprefixer
			module: {
				rules: [{// 编译jsx／js
						test: /(\.jsx|\.js)$/,
						use: {
							loader: "babel-loader"
						},
						exclude: /node_modules/// 不编译node／modules
					},
					{// 将css加载为模块=style-loader+css-loader
						test: /\.css$/,
						use: [{
							loader: "style-loader" // 将所有的计算后的样式加入页面中
						}, {
							loader: "css-loader",// import的方式引入
							options: {// 允许将css以模块的方式引入，并且styles.root
		                            modules: true
		                        }
						},{// 对原生CSS的拓展后的scss,less的文件的编译
							loader: "postcss-loader"// scss,less
						}
						]
					}
				]
			}
			// postcss.config.js
			module.exports = {
			    plugins: [
			        require('autoprefixer')
			    ]
			}
		插件（Plugins）:
			拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。
			oaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个。
			插件并不直接操作单个文件，它直接对整个构建过程其作用。
			Webpack有很多内置插件，同时也有很多第三方插件
			使用插件：npm安装它，然后在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）
			一：
			plugins: [
		        new webpack.BannerPlugin('版权所有，翻版必究')
		    ]
		    二：
		    npm install --save-dev html-webpack-plugin
		    1:移除public文件夹，利用此插件，index.html文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。
		    2:在app目录下，创建一个index.tmpl.html文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件
		    3:config.js中的plugins: [
		        new webpack.BannerPlugin('版权所有，翻版必究'),
		        new HtmlWebpackPlugin({
		            template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数
		        })
		    ]
		    三：
		    Hot Module Replacement：修改组件代码后，自动刷新实时预览修改后的效果。
		    HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，如果想让它工作，需要对模块进行额外的配额；
			Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；
		    1: 
		    plugins: [
		        new webpack.BannerPlugin('版权所有，翻版必究'),
		        new HtmlWebpackPlugin({
		            template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数
		        }),
		        new webpack.HotModuleReplacementPlugin()//热加载插件
		    ],
		    2:devServer: {
				contentBase: "./public", //本地服务器所加载的页面所在的目录
				historyApiFallback: true, //不跳转
				inline: true, //实时刷新
				hot: true
			},
			3:npm install --save-dev babel-plugin-react-transform react-transform-hmr
			// .babelrc
			{
			  "presets": ["react", "es2015"],
			  "env": {
			    "development": {
			    "plugins": [["react-transform", {
			       "transforms": [{
			         "transform": "react-transform-hmr",
			         
			         "imports": ["react"],
			         
			         "locals": ["module"]
			       }]
			     }]]
			    }
			  }
			}