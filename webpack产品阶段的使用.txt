目前为止，我们已经使用webpack构建了一个完整的开发环境。
	但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。
	对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个	  webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，
	1:webpack.production.config.js=webpack.config.js的内容
	2:package.json:script + "build": "NODE_ENV=production webpack --config ./webpack.production.config.js --progress"
优化插件:
	发布阶段非常有用的优化插件:
	OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID
	UglifyJsPlugin：压缩JS代码；
	ExtractTextPlugin：分离CSS和JS文件
	1:npm install --save-dev extract-text-webpack-plugin
	plugins: [
        new webpack.BannerPlugin('版权所有，翻版必究'),
        new HtmlWebpackPlugin({
            template: __dirname + "/app/index.tmpl.html"
        }),
        new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.optimize.UglifyJsPlugin(),
        new ExtractTextPlugin("style.css")
    ],
	2: npm run build 可以看见代码是被压缩后的样子
缓存：
	缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）
	webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前
	 output: {
	        path: __dirname + "/build",
	        filename: "bundle-[hash].js"
	    },
